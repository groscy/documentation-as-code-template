name: Build Architecture Documentation

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  checkout-scs:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ github.head_ref }}
      - name: Version bump
        id: version
        uses: vemel/nextversion@0.1.1
        with:
          path: .version
          type: semver
          release: stable
          result: patch
          encoding: utf-8
      - name: Manual update .version file
        run: echo v${{ steps.version.outputs.result }} > .version
      - name: Commit updated .version file
        uses: stefanzweifel/git-auto-commit-action@v4.15.4
        with:
          commit_message: Update .version to ${{ steps.version.outputs.result }}
          file_pattern: .version
      - name: persist-workspace
        uses: bissolli/gh-action-persist-workspace@v1
        with:
          action: persist
  generate-diagrams:
    needs: [checkout-scs]
    runs-on: ubuntu-latest
    steps:      
      - uses: bissolli/gh-action-persist-workspace@v1
        with:
          action: retrieve
      - name: Download and install Structurizr-CLI
        run: |
          curl -o documentation/bin/structurizr-cli.zip "https://static.structurizr.com/download/structurizr-cli.zip"
          unzip documentation/bin/structurizr-cli.zip -d documentation/bin/structurizr-cli
          rm -f documentation/bin/structurizr-cli.zip
      - name: Export Diagrams with Structurizr-CLI
        run: bash ./documentation/bin/structurizr-cli/structurizr.sh export -workspace documentation/src/domain/kibon.dsl -format plantuml -output documentation/resources/diagrams
      - name: persist-workspace
        uses: bissolli/gh-action-persist-workspace@v1
        with:
          action: persist
  generate-pdf:
    needs: [generate-diagrams]
    runs-on: ubuntu-latest
    steps:
      - uses: bissolli/gh-action-persist-workspace@v1
        with:
          action: retrieve                
      - name: Generate PDF
        uses: tonynv/asciidoctor-action@v2
        with:
          program: gem install asciidoctor-lists && asciidoctor -b pdf -v -r asciidoctor-diagram -r asciidoctor-pdf -r asciidoctor-lists -a pdf-theme=basic -a pdf-themesdir=documentation/resources/themes -a pdf-fontsdir=documentation/resources/fonts -D documentation/out/pdf documentation/kibon-system.adoc
      - name: persist-workspace
        uses: bissolli/gh-action-persist-workspace@v1
        with:
          action: persist
  release-artifacts:
    needs: [generate-pdf]
    runs-on: ubuntu-latest
    steps:
      - uses: bissolli/gh-action-persist-workspace@v1
        with:
          action: retrieve 
      - name: Set version variable
        run: |
          VER=$(cat .version)
          echo "VERSION=$VER" >> $GITHUB_ENV
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.VERSION }}
          release_name: Release ${{ env.VERSION }}
          draft: false
          prerelease: false
      - name: Upload Release Asset
        id: upload-release-asset 
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} 
          asset_path: ./documentation/out/pdf/kibon-system.pdf
          asset_name: kiBon-Architecture-Documentation.pdf
          asset_content_type: application/pdf
  clear-workspace:
    needs: [release-artifacts]
    runs-on: ubuntu-latest
    steps:
      - name: Delete Artifact
        uses: GeekyEggo/delete-artifact@v2.0.0
        with:
          name: persisted-artifact
